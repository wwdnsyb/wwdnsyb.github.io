---
layout:     post
title:      "具有不同程度执行时间保证的多关键度系统的抢占式调度"
subtitle:   " \"论文阅读总结的知识点\""
date:       2024-11-23 21:16:00
author:     "Nianbo"
header-img: "[img/post-bg-2015.jpg](https://img95.699pic.com/photo/60013/6946.jpg_wh860.jpg)"
catalog: true
tags:
    - Thesis
---

> “Yeah It's on. ”

混合关键系统，单处理器固定优先级，鼻祖级别的论文
Preemptive Scheduling of Multi-Criticality Systems with Varying Degrees of Execution Time Assurance
啃起来有些吃力，但还好最终还是有结果的。

首先给出本文中的核心公式，几乎所有的论述都将围绕公式展开：

 $R_{i}=\sum_{j: \rho_{j} \leq \rho_{i}}\left\lceil\frac{R_{i}}{T_{j}}\right\rceil C_{j L_{i}} (1)$

以下是一些个人总结的初学者可能遇到的问题：

1.为什么在公式中，任务周期最坏执行时间R必须严格不大于截止时间D；
  答：这是任务是否可调度的重要判断依据，必须严格执行。可将R看作是某一极端情况下的任务执行时间，若 
      它大于截止时间D，则无法保证实时性、稳定性、和可靠性。（试想在航空航天这种高精度要求的情况 
      下，超时是绝对不被允许的。）

2.Audsley算法的作用和功能：
  答：Audsley算法是混合临界问题中的重要算法，Audsley 算法是一种用于分配任务优先级的方法，旨在解决 
      多关键度系统中任务优先级分配的问题，以提高系统的可调度性。其作用是在考虑任务不同关键度级别以 
      及相应的最坏情况执行时间（WCET）的基础上，合理分配优先级，使得系统能够更有效地调度任务，满足 
      任务的截止时间要求，特别是在安全关键任务与非关键任务共存的系统中，确保关键任务能够优先执行， 
      同时尽量提高整体系统的资源利用率。本文中在Audsley 算法中考虑到了任务关键度对任务优先级的影 
      响，并将任务的关键度作为优先级排序的重要影响因素之 一。关键度是人为根据任务的重要程度（可以 
      简单将它看作任务执行超时或执行失败时所造成的后果）规定的优先等级，关键度数值越大任务越重 
      要，越关键。

3.论文中优先级和关键度两个概念之间的区别，以及它们分别是怎么来的
  答：优先级是用于确定任务在系统中执行顺序的属性。在所有的就绪任务中，优先级高的优先执行。优先级的 
      分配通常基于任务的截止时间、周期等因素。常见的优先级分配算法如截止时间单调优先级分配 
     （Deadline - Monotonic Priority Assignment，DMPA），它根据任务的截止时间来分配优先级，截止 
      时间越短，优先级越高；速率单调优先级分配（Rate - Monotonic Priority Assignment，RMPA）则是 
      根据任务的周期来分配优先级，周期越短，优先级越高。这些算法旨在通过合理分配优先级，提高系统的 
      可调度性，确保任务能够按时完成。
      关键度是衡量任务对系统重要性和影响程度的指标，它反映了任务在系统中的相对重要性。关键度通常在 
      系统设计和安全分析阶段确定。
      优先级主要影响任务的执行顺序，是一种调度层面的属性，用于在运行时决定哪个任务先占用处理器资 
      源；而关键度侧重于任务对系统的重要性和影响程度，是一种从系统设计和功能角度出发的属性，用于指 
      导系统在设计、开发和验证过程中对不同任务采取不同的处理策略。
      优先级的确定通常基于任务的时间特性（如截止时间、周期）等可量化的因素，并且可以在运行时根据任 
      务的状态和系统的调度策略进行动态调整；关键度的确定更多地依赖于系统的功能需求、安全标准以及任 
      务错误行为的后果评估等定性和定量相结合的因素，一旦确定，在系统运行过程中通常不会改变。
      
4.优先级和关键度在决定任务先后执行顺序上，分别起到了什么作用
  答：基于优先级的抢占式调度：优先级决定了在运行时任务竞争处理器资源时的执行顺序。在抢占式固定优先 
      级（PFP）调度中，当多个任务处于就绪状态时，处理器会优先执行优先级最高（数值最小）的任务。
      影响任务响应时间和可调度性：优先级的分配方式直接影响任务的最坏情况响应时间。
      关键度影响优先级分配策略：关键度为优先级分配提供了额外的约束和指导。
      多关键度分析优化调度决策：通过多关键度分析，算法根据任务在不同关键度级别下的最坏情况执行时间 
     （WCET）来评估任务的可调度性。
     
5.Audsley 算法进行可调度性分的实质
  答：在 Audsley 算法中，计算任务的最坏情况响应时间R是判断任务可调度性的核心步骤之一。通过迭代计 
      算R，可以确定在给定优先级假设下，任务是否能够在其截止时间内完成执行。R从初始赋值为WCET之后， 
      经过不断迭代计算更新数值R，最后直到R收敛于某个值或者大于D（截止时间）。Audsley 算法的可调度 
      性分析是一个迭代过程，不仅仅是计算一次R和进行一次比较。它从最低优先级开始，依次假设每个未分 
      配优先级的任务具有最高优先级，然后计算在这种假设下所有任务的最坏情况响应时间并判断可调度性。 
      如果存在可调度的任务，选择一个（如代码中简化为选择第一个可调度任务，论文中可能有更复杂的选择 
      策略）并分配优先级，然后继续对剩余未分配优先级的任务进行同样的操作。这个过程会不断调整任务的 
      优先级假设，重新计算R并判断可调度性，直到所有任务都被分配优先级或者发现不存在可行的优先级分 
      配方案（即所有剩余未分配优先级的任务在假设具有最高优先级时都不可调度）。因此，Audsley 算法的 
      可调度性分析是一个综合考虑不同优先级组合、基于最坏情况响应时间计算和比较的迭代过程，旨在找到 
      一种能够满足系统多关键度要求的最优优先级分配策略，以确保整个任务集的可调度性。
      
6.Audsley 算法在整个任务处理过程中将排列几次优先级，若此时某些任务无法被调度，怎么办
  答：Audsley 算法在整个任务处理过程中会对优先级进行多次排列，具体次数取决于任务集的规模和特性。算 
      法从最低优先级开始，每次选择一个未分配优先级的任务，假设其具有最高优先级，然后检查整个任务集 
      的可调度性。如果该任务可调度，则为其分配优先级，并从未分配优先级任务集合中移除该任务，继续处 
      理剩余未分配优先级的任务。这个过程会不断重复，直到所有任务都被分配优先级或者发现不存在可行的 
      优先级分配方案（即所有剩余未分配优先级的任务在假设具有最高优先级时都不可调度）。
      如果在 Audsley 算法执行过程中发现某些任务无法被调度，算法会根据当前的优先级分配情况进行调 
      整。在每一步中，当发现所有剩余未分配优先级的任务在假设具有最高优先级时都不可调度时，算法会回 
      溯到上一次成功分配优先级的任务，尝试调整其优先级或者选择其他可调度的任务（如果存在的话）。然 
      而，如果经过所有可能的尝试后仍然无法找到可行的优先级分配方案，算法最终会终止并输出失败信息， 
      表示在当前任务集和系统条件下，无法通过 Audsley 算法找到满足可调度性要求的优先级分配。
      
7.在本文中经过Audsley 算法排序后，优先级也就不再改变了吗
  答：在本文中，经过 Audsley 算法排序后，优先级在任务执行过程中通常不再改变。
      Audsley 算法属于抢占式固定优先级（PFP）调度算法的范畴。其设计目的是在任务执行前确定一个对 
      最优的优先级分配方案，以满足系统在多关键度环境下的可调度性要求。一旦通过算法的迭代过程完成 
      了优先级分配，这个优先级顺序在任务执行期间就保持固定。这种固定优先级的设计有助于系统在运行 
      时进行有效的任务调度管理。处理器可以根据预先确定的优先级顺序，在多个任务同时处于就绪状态 
      时，快速、准确地选择优先级最高的任务进行执行，而无需在运行时动态调整优先级，减少了调度决策 
      的复杂性和开销。

8.为什么Audsley 算法从最低优先级开始，如果这样的话，cpu的利用率不久降低了么
  答：Audsley 算法从最低优先级开始分配优先级是基于其对任务可调度性的判断原理。该算法利用了一个重 
     要的观察结果（引理 1），即一个任务的最坏情况响应时间可以在不知道其他任务具体优先级分配的情况 
     下，仅通过知道哪些任务具有更高优先级来确定。从最低优先级开始分配，意味着在每一步中，当考虑一 
     个未分配优先级的任务时，已经确定了所有可能具有更高优先级任务的集合（尽管这些任务的具体优先级 
     尚未最终确定，但知道它们最终会有更高优先级）。这样，就可以通过假设当前任务具有最高优先级（即 
     比所有未分配优先级的任务优先级高），并计算在这种假设下的最坏情况响应时间来判断其可调度性。如 
     果在这种假设下任务可调度，那么根据引理 2（如果任务在给定优先级分配下可调度，那么分配更高优先 
     级时它仍然可调度），可以确定该任务在最终的优先级分配中一定是可调度的，从而逐步构建出一个可行 
     的优先级分配方案。
     寻找最优优先级分配方案：从最低优先级开始分配有助于系统地搜索所有可能的优先级分配组合，以找到 
     最优的（如果存在的话）优先级分配方案。在每一步中，通过检查未分配优先级任务在假设最高优先级下 
     的可调度性，可以排除那些不可行的优先级分配选择，逐渐缩小搜索空间，最终找到一种能够使整个任务 
     集在多关键度环境下都可调度的优先级分配方式。这种逐步构建和优化的过程从最低优先级开始更为合 
     理，因为它可以基于已确定的较高优先级任务集合来评估每个新任务的可调度性，确保在每一步中做出的 
     优先级分配决策都是可行的，并且朝着最优解的方向前进。
     短期看似利用率降低，长期目标是整体优化：虽然从最低优先级开始分配任务在初始阶段可能会使一些低 
     优先级任务先获得执行机会，导致在短期内可能看起来 CPU 利用率没有被高优先级任务充分利用，但这 
     并不意味着整体 CPU 利用率会降低。Audsley 算法的目标是找到一种优先级分配方案，使得整个任务集 
     在满足多关键度要求的前提下能够最大程度地利用系统资源，包括 CPU 时间。通过合理地分配优先级， 
     确保高关键度任务在需要时能够及时获得 CPU 资源，同时避免低关键度任务过度占用资源，从而在长期 
     运行中提高系统的整体性能和资源利用率。例如，在一个包含高关键度实时任务和低关键度后台任务的系 
     统中，从最低优先级开始分配任务可能会让低关键度后台任务先执行一段时间，但当高关键度实时任务需 
     要执行时，由于其较高的关键度和合理的优先级分配，它能够抢占低关键度任务的 CPU 资源，保证实时 
     任务的及时性，而在高关键度任务执行间隙，低关键度任务可以利用剩余的 CPU 时间继续执行，从而实 
     现系统资源的有效利用，提高整体 CPU 利用率。
     与传统调度算法的对比和优势：与一些传统的调度算法相比，Audsley 算法的这种优先级分配方式可能在 
     初始阶段表现出不同的 CPU 利用率模式，但它能够更好地适应多关键度系统的复杂需求。传统算法可能 
     会根据单一因素（如截止时间或周期）直接分配优先级，而不考虑任务的关键度级别和整体系统的可调度 
     性。Audsley 算法通过从最低优先级开始的迭代分配过程，综合考虑了任务的关键度、可调度性以及不同 
     优先级任务之间的相互影响，能够在更复杂的多关键度环境中找到更优的优先级分配方案，从而在长期运 
     行中实现更高的系统性能和资源利用率，而不仅仅关注短期的 CPU 利用率。

10.在进行任务调度时，在某种程度上可以说优先级是唯一的排列执行顺序的标准，而关键度值时评判优先级的 
   参数指标之一。
